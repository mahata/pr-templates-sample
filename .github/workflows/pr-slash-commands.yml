name: PR slash command template inserter

on:
  issue_comment:
    types: [created]

jobs:
  insert-template:
    if: |
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/template ')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Get template name
        id: parse
        run: |
          # Expected comment example: /template feature
          key=$(echo "${{ github.event.comment.body }}" | awk '{print $2}')
          echo "key=$key" >> $GITHUB_OUTPUT

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Read template file
        id: read
        run: |
          cat > read-template.mjs <<'EOF'

          import fs from "fs";
          const key = process.env.TEMPLATE_KEY;
          const file = `.github/PULL_REQUEST_TEMPLATE/${key}.md`;
          if (!fs.existsSync(file)) {
            process.stdout.write(`content=Template not found: ${file}\n`);
            process.exit(0);
          }
          const lines = fs.readFileSync(file, "utf8").replace(/\r/g, "").split("\n");
          const escaped = lines.map(l => l.replace(/"/g, '\\"'));
          const content = escaped.join("\\n");
          process.stdout.write(`content=${content}\n`);

          EOF
          node read-template.mjs >> "$GITHUB_OUTPUT"
        env:
          TEMPLATE_KEY: ${{ steps.parse.outputs.key }}

      - name: Update PR body (curl)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          NUMBER: ${{ github.event.issue.number }}
          TEMPLATE_CONTENT: ${{ steps.read.outputs.content }}
        run: |
          # 新しい本文を組み立て (テンプレートは既に \n エスケープ済み)
          template_real=$(printf "%b" "$TEMPLATE_CONTENT")

          # jq を使って JSON 文字列として安全にエンコード
          payload=$(jq -Rn --arg b "$new_body" '{body: $b}')

          curl -s -X PATCH \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/json" \
            -d "$payload" \
            "https://api.github.com/repos/$REPO/pulls/$NUMBER"
